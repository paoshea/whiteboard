// MobileDrawingSurface component modification
const MobileDrawingSurface = ({ canvasRef, platform, ...props }) => {
  // Prevent default touch behaviors at the document level for iOS
  useEffect(() => {
    const preventBehavior = (e) => {
      e.preventDefault();
    };

    // Prevent scrolling on iOS
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.width = '100%';
    document.body.style.height = '100%';
    
    // Prevent touchmove default behavior
    document.addEventListener('touchmove', preventBehavior, { passive: false });
    
    return () => {
      // Cleanup
      document.body.style.overflow = '';
      document.body.style.position = '';
      document.body.style.width = '';
      document.body.style.height = '';
      document.removeEventListener('touchmove', preventBehavior);
    };
  }, []);

  const handleTouchStart = (e) => {
    e.preventDefault();
    e.stopPropagation();
    const touch = e.touches[0];
    props.onDrawStart(touch.clientX, touch.clientY);
  };

  const handleTouchMove = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (props.isDrawing) {
      const touch = e.touches[0];
      props.onDraw(touch.clientX, touch.clientY);
    }
  };

  return (
    <div className="absolute inset-0 touch-none overscroll-none"
         style={{
           overflow: 'hidden',
           WebkitOverflowScrolling: 'touch',
         }}>
      <canvas
        ref={canvasRef}
        className="w-full h-full bg-white touch-none"
        style={{
          touchAction: 'none',
          WebkitTouchCallout: 'none',
          WebkitUserSelect: 'none',
          WebkitTapHighlightColor: 'transparent',
          userSelect: 'none',
          position: 'absolute',
          top: 0,
          left: 0,
          overscrollBehavior: 'none',
          msOverflowStyle: 'none',
          scrollbarWidth: 'none'
        }}
        onTouchStart={handleTouchStart}
        onTouchMove={handleTouchMove}
        onTouchEnd={props.onDrawEnd}
        onTouchCancel={props.onDrawEnd}
        {...props}
      />
    </div>
  );
};

// Main Whiteboard component layout modification
const Whiteboard = () => {
  // ... existing state and hooks ...

  return (
    <div className="fixed inset-0 flex flex-col bg-gray-50 overflow-hidden touch-none">
      {isMobile ? (
        <>
          <MobileHeader
            onMenuOpen={() => setShowMobileMenu(true)}
            title={pages[currentPageIndex].name}
            className="flex-shrink-0 z-10"
          />

          <Sheet open={showMobileMenu} onOpenChange={setShowMobileMenu}>
            <SheetContent side="left" className="w-4/5">
              <SheetHeader>
                <SheetTitle>Navigation</SheetTitle>
              </SheetHeader>
              <div className="mt-4">
                <FolderTree
                  folders={folders}
                  currentFolder={currentFolder}
                  onFolderSelect={(folder) => {
                    setCurrentFolder(folder);
                    setShowMobileMenu(false);
                  }}
                />
              </div>
            </SheetContent>
          </Sheet>

          <main className="flex-1 relative overflow-hidden touch-none">
            <MobileDrawingSurface
              canvasRef={canvasRef}
              platform={platform}
              isDrawing={isDrawing}
              onDrawStart={handleDrawStart}
              onDraw={handleDraw}
              onDrawEnd={handleDrawEnd}
            />
            <MobileDrawingControls
              color={color}
              setColor={setColor}
              lineWidth={lineWidth}
              setLineWidth={setLineWidth}
            />
          </main>

          <MobileNavigation
            pages={pages}
            currentPageIndex={currentPageIndex}
            onPageChange={(index) => {
              saveCurrentPage();
              setCurrentPageIndex(index);
            }}
            className="flex-shrink-0 z-10"
          />

          <div className="fixed bottom-20 left-4 z-20">
            <div className="flex flex-col gap-2">
              <Button
                variant="outline"
                size="icon"
                className="rounded-full shadow-lg bg-white"
                onClick={clearCanvas}
              >
                <Eraser className="h-6 w-6" />
              </Button>
              <Button
                variant="outline"
                size="icon"
                className="rounded-full shadow-lg bg-white"
                onClick={takeScreenshot}
              >
                <Camera className="h-6 w-6" />
              </Button>
            </div>
          </div>
        </>
      ) : (
        // Desktop layout remains the same
        <div>Desktop Layout</div>
      )}
    </div>
  );
};

export default Whiteboard;